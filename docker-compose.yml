networks:
  app_brige_net:
    driver: bridge

volumes:
  db_volume:

services:

  db:
    image: 
      postgres:17
    container_name:
      db_postgreSQL
    env_file:
      - ./DB/.env
    volumes:
      - db_volume:/var/lib/postgresql/data/
      - ./DB/init.sql:/docker-entrypoint-initdb.d/init.sql #Файл для первоначальной инициализации
    networks:
      - app_brige_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

#   api:
#     image: ghcr.io/kgn43/my-api-image:latest
#     container_name: api_lr_4
#     # ports:
#     #   - "15000:15000"
#     networks:
#       - my_net_lr_4
#     restart: always
#     depends_on:
#       - db

  
#   bot:
#     image: ghcr.io/kgn43/my-bot-image:latest  
#     container_name: bot_lr_4
# #    ports:
# #      - "15001:15001"
#     networks:
#       - my_net_lr_4
#     restart: always
#     depends_on:
#       - api
  
  # nginx:
  #   image: nginx:stable-alpine
  #   container_name: nginx_lr_4 
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro             
  #     - ./ssl:/etc/ssl/private:ro
  #     - ./ssl:/etc/ssl/certs:ro
  #     - ./Front/front/build:/var/www/html:ro 
  #   networks:
  #     - my_net_lr_4
  #   depends_on:
  #     - api 
  #   restart: always
  
  pgadmin:
    image:
      dpage/pgadmin4:latest  
    container_name:
      pgAdmin
    env_file:
      - ./pgAdmin/.env
    volumes:
      - ./pgAdmin/server.json:/pgadmin4/servers.json
    ports:
      - "8899:80"
    networks:
      - app_brige_net
    restart: always
    depends_on:
      db:
        condition: service_healthy

